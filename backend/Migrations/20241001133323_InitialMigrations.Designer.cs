// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using backend.Models;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(ServerContext))]
    [Migration("20241001133323_InitialMigrations")]
    partial class InitialMigrations
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("backend.Models.Articles", b =>
                {
                    b.Property<string>("articles_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Commentscomment_id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("category_id")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("createAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("view")
                        .HasColumnType("int");

                    b.HasKey("articles_id");

                    b.HasIndex("Commentscomment_id");

                    b.HasIndex("category_id");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("backend.Models.Categories", b =>
                {
                    b.Property<string>("category_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("category_name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("category_id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("backend.Models.Comments", b =>
                {
                    b.Property<string>("comment_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("articles_id")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("createAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("user_id")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("comment_id");

                    b.HasIndex("articles_id");

                    b.HasIndex("user_id");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("backend.Models.Likes", b =>
                {
                    b.Property<string>("like_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Likeslike_id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("articles_id")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("user_id")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("like_id");

                    b.HasIndex("Likeslike_id");

                    b.HasIndex("articles_id");

                    b.HasIndex("user_id");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("backend.Models.User", b =>
                {
                    b.Property<string>("user_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("role")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("user_id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("backend.Models.Articles", b =>
                {
                    b.HasOne("backend.Models.Comments", null)
                        .WithMany("Articles")
                        .HasForeignKey("Commentscomment_id");

                    b.HasOne("backend.Models.Categories", "category")
                        .WithMany("Articles")
                        .HasForeignKey("category_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("category");
                });

            modelBuilder.Entity("backend.Models.Comments", b =>
                {
                    b.HasOne("backend.Models.Articles", "Article")
                        .WithMany("Comments")
                        .HasForeignKey("articles_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.User", "user")
                        .WithMany("Comments")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("user");
                });

            modelBuilder.Entity("backend.Models.Likes", b =>
                {
                    b.HasOne("backend.Models.Likes", null)
                        .WithMany("Like")
                        .HasForeignKey("Likeslike_id");

                    b.HasOne("backend.Models.Articles", "Article")
                        .WithMany("Likes")
                        .HasForeignKey("articles_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.User", "user")
                        .WithMany("Likes")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("user");
                });

            modelBuilder.Entity("backend.Models.Articles", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Likes");
                });

            modelBuilder.Entity("backend.Models.Categories", b =>
                {
                    b.Navigation("Articles");
                });

            modelBuilder.Entity("backend.Models.Comments", b =>
                {
                    b.Navigation("Articles");
                });

            modelBuilder.Entity("backend.Models.Likes", b =>
                {
                    b.Navigation("Like");
                });

            modelBuilder.Entity("backend.Models.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Likes");
                });
#pragma warning restore 612, 618
        }
    }
}
